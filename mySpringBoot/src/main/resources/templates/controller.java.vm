#*
package ${package.Controller};


import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import java.util.List;

import $!{package.Service}.$!{table.serviceName};
import ${package.Entity}.${entity};

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
    #if(${superControllerClass})
    public class ${table.controllerName} extends ${superControllerClass} {
    #else
    public class ${table.controllerName} {
    #end


@Resource
private ${table.serviceName} ${table.entityPath}Service;
//删除数据
@DeleteMapping("/{id}")
public boolean delete(@PathVariable Integer id){
        return ${table.entityPath}Service.removeById(id);
        }
@PostMapping//插入
//新增或更新
public boolean save(@RequestBody ${entity} ${table.entityPath}){
        return userService.saveOrUpdate(${table.entityPath});//${table.entityPath}==user 动态
        }

//查询所有数据
@GetMapping("/")//依赖于RestController
public List<${entity}> findAll(){//User==${entity}
        return ${table.entityPath}Service.list();
        }

        //id查询
@GetMapping("/{id}")
public List<${entity}> findOne(@PathVariable Integer id){
        return ${table.entityPath}Service.list();
        }

//分页查询
@GetMapping("/page")
public Page<${entity}> findPage(@RequestParam Integer pageNum,
@RequestParam Integer pageSize){
        return ${table.entityPath}Service.page(new Page<>(pageNum,pageSize));
        }
        }

#end*#

//模板
package ${package.Controller};

import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import java.util.List;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import $!{package.Service}.$!{table.serviceName};
import ${package.Entity}.${entity};

#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end" )
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
    #if(${superControllerClass})
    public class ${table.controllerName} extends ${superControllerClass} {
    #else
    public class ${table.controllerName} {
    #end

@Resource
private ${table.serviceName} ${table.entityPath}Service;

//自定义接口
//新增，更新
@PostMapping
public Result save(@RequestBody ${entity} ${table.entityPath}){
        return Result.success(${table.entityPath}Service.saveOrUpdate(${table.entityPath}));
        }
//删除
@DeleteMapping("/{id}" )
public Boolean delete(@PathVariable Integer id){
        return ${table.entityPath}Service.removeById(id);
        }
//批量删除
@PostMapping("/del/batch" )
public Result deleteBatch(@RequestBody List<Integer> ids){
        return Result.success(${table.entityPath}Service.removeByIds(ids));
        }
//查询全部
@GetMapping
public Result<${entity}> findAll(){
        return Result.success(${table.entityPath}Service.list());
        }

//按照id查查询
@GetMapping("/{id}" )
public Result findOne(@PathVariable Integer id){
        return Result.success(${table.entityPath}Service.getById(id));
        }
//分页查询
@GetMapping("/page" )
public Result findPage(
    @RequestParam Integer pageNum,
    @RequestParam Integer pageSize){
        QueryWrapper<${entity}> queryWrapper=new QueryWrapper<>();
        // queryWrapper.orderByDesc("id");
        return Result${table.entityPath}Service.page(new Page<>(pageNum,pageSize),queryWrapper));
        }
        }

#end
